<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ista Zahn</title><link>http://people.fas.harvard.edu/~izahn/</link><description>Bits and bobs related to data science and programming</description><atom:link href="http://people.fas.harvard.edu/~izahn/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Wed, 07 Dec 2016 20:24:49 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Resources for learning R</title><link>http://people.fas.harvard.edu/~izahn/posts/resources-for-learning-r/</link><dc:creator>Ista Zahn</dc:creator><description>&lt;p&gt;
A list of resources for learning R in preparation for &lt;a href="https://courses.harvard.edu/detail?q=id:d_colgsas_2016_2_203546_001&amp;amp;returnUrl=search%253Fq%253Dcs%252520109%2526sort%253Dcourse_title%252520asc%2526start%253D0%2526rows%253D25"&gt;CS109&lt;/a&gt; this Spring.
&lt;/p&gt;

&lt;p&gt;
A wealth of R resources are available, and I'm sure I've missed some really good ones. If you have a favorite tutorial or resource that is not listed here, please &lt;a href="mailto:izahn@g.harvard.edu"&gt;email me&lt;/a&gt; or submit a bug report or pull request to &lt;a href="http://github.com/izahn/blog"&gt;http://github.com/izahn/blog&lt;/a&gt;.
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Tutorials&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;Interactive&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;p&gt;
There are some great efforts to provide interactive self-paced R tutorials in your browser or in R itself.
&lt;/p&gt;

&lt;dl class="org-dl"&gt;
&lt;dt&gt; &lt;a href="https://www.datacamp.com/"&gt;https://www.datacamp.com/&lt;/a&gt; &lt;/dt&gt;&lt;dd&gt;Interactive R tutorials with feedback, right in your web browser!
&lt;/dd&gt;
&lt;dt&gt; &lt;a href="http://swirlstats.com/students.html"&gt;http://swirlstats.com/students.html&lt;/a&gt; &lt;/dt&gt;&lt;dd&gt;Interactive R tutorials with feedback in R.
&lt;/dd&gt;
&lt;dt&gt; &lt;a href="http://dss.iq.harvard.edu/workshop-materials#widget-1"&gt;http://dss.iq.harvard.edu/workshop-materials#widget-1&lt;/a&gt; &lt;/dt&gt;&lt;dd&gt;Interactive R tutorials in your web browser. Includes a &lt;code&gt;ggplot&lt;/code&gt; tutorial.
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-1-2" class="outline-3"&gt;
&lt;h3 id="sec-1-2"&gt;Static&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;p&gt;
Many R tutorials have been collected at &lt;a href="https://www.r-project.org/other-docs.html"&gt;https://www.r-project.org/other-docs.html&lt;/a&gt;. The list of contributed documentation at &lt;a href="https://cran.r-project.org/other-docs.html"&gt;https://cran.r-project.org/other-docs.html&lt;/a&gt; is a great place to start.
&lt;/p&gt;

&lt;p&gt;
There are several excellent tutorials not listed on r-project.org. Some of these are listed below.
&lt;/p&gt;

&lt;dl class="org-dl"&gt;
&lt;dt&gt; &lt;a href="http://www.statmethods.net/"&gt;http://www.statmethods.net/&lt;/a&gt; &lt;/dt&gt;&lt;dd&gt;"Quick-R" aims to get you up and running in R quickly.
&lt;/dd&gt;
&lt;dt&gt; &lt;a href="http://personality-project.org/r/r.guide.html"&gt;http://personality-project.org/r/r.guide.html&lt;/a&gt; &lt;/dt&gt;&lt;dd&gt;Notes on "Using R for psychological research". 
&lt;/dd&gt;
&lt;dt&gt; &lt;a href="http://r4ds.had.co.nz/"&gt;http://r4ds.had.co.nz/&lt;/a&gt; &lt;/dt&gt;&lt;dd&gt;"R for Data Science" by R luminary Hadley Wickham. Includes a &lt;code&gt;ggplot&lt;/code&gt; tutorial.
&lt;/dd&gt;
&lt;dt&gt; &lt;a href="http://rmarkdown.rstudio.com/lesson-1.html"&gt;http://rmarkdown.rstudio.com/lesson-1.html&lt;/a&gt; &lt;/dt&gt;&lt;dd&gt;A comprehensive RMarkdown tutorial.
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Reference cards&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
&lt;a href="https://www.rstudio.com/"&gt;RStudio&lt;/a&gt; maintains a collection of high-quality cheat sheets at &lt;a href="https://www.rstudio.com/resources/cheatsheets/"&gt;https://www.rstudio.com/resources/cheatsheets/&lt;/a&gt; (these are also accessible from the &lt;code&gt;Help -&amp;gt; cheat-sheets&lt;/code&gt; menu in the &lt;a href="https://www.rstudio.com/products/rstudio/#Desktop"&gt;RStudio IDE&lt;/a&gt;). Additional resources are listed below.
&lt;/p&gt;

&lt;dl class="org-dl"&gt;
&lt;dt&gt; &lt;a href="http://mathesaurus.sourceforge.net/r-numpy.html"&gt;http://mathesaurus.sourceforge.net/r-numpy.html&lt;/a&gt; &lt;/dt&gt;&lt;dd&gt;A numpy cheat sheet for R users, but it works just as well the other way around.
&lt;/dd&gt;
&lt;dt&gt; &lt;a href="http://www.math.umaine.edu/~hiebeler/comp/matlabR.pdf"&gt;http://www.math.umaine.edu/~hiebeler/comp/matlabR.pdf&lt;/a&gt; &lt;/dt&gt;&lt;dd&gt;An R cheat sheet for MATLAB users.
&lt;/dd&gt;
&lt;dt&gt; &lt;a href="http://mathesaurus.sourceforge.net/matlab-python-xref.pdf"&gt;http://mathesaurus.sourceforge.net/matlab-python-xref.pdf&lt;/a&gt; &lt;/dt&gt;&lt;dd&gt;Another R cheat sheet for MATLAB or Python users.
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;R package discovery&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
The &lt;a href="http://cran.r-project.org"&gt;Comprehensive R Archive Network (CRAN)&lt;/a&gt; is the main R package repository. The web interface is not very sophisticated, so I recommend using the resources listed below instead.
&lt;/p&gt;

&lt;dl class="org-dl"&gt;
&lt;dt&gt; &lt;a href="https://cran.r-project.org/web/views/"&gt;https://cran.r-project.org/web/views/&lt;/a&gt; &lt;/dt&gt;&lt;dd&gt;R Task Views are curated lists of R packages and functions organized by topic.
&lt;/dd&gt;
&lt;dt&gt; &lt;a href="http://r-pkg.org"&gt;http://r-pkg.org&lt;/a&gt; &lt;/dt&gt;&lt;dd&gt;METACRAN is a friendly, search-able web interface to CRAN.
&lt;/dd&gt;
&lt;dt&gt; &lt;a href="http://rdocumentation.org"&gt;http://rdocumentation.org&lt;/a&gt; &lt;/dt&gt;&lt;dd&gt;A search-able interactive interface to R and R package documentation.
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;Blogs, forums and mailing lists&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
R related blogs are aggregated at &lt;a href="http://r-bloggers.com"&gt;http://r-bloggers.com&lt;/a&gt;. 
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://stackoverflow.com"&gt;http://stackoverflow.com&lt;/a&gt; is by far the most popular help forum for R. Use the &lt;code&gt;[r]&lt;/code&gt; tag or navigate directly to &lt;a href="http://stackoverflow.com/questions/tagged/r"&gt;http://stackoverflow.com/questions/tagged/r&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Although the &lt;a href="https://www.r-project.org/mail.html"&gt;R mailing lists&lt;/a&gt; have been losing traffic to stackoverflow there are still plenty of people (including me) responding to questions. You can subscribe to the main R-help mailing list at &lt;a href="https://stat.ethz.ch/mailman/listinfo/r-help"&gt;https://stat.ethz.ch/mailman/listinfo/r-help&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>learning</category><category>R</category><category>resources</category><category>tutorials</category><guid>http://people.fas.harvard.edu/~izahn/posts/resources-for-learning-r/</guid><pubDate>Wed, 07 Dec 2016 19:02:26 GMT</pubDate></item><item><title>Coming to terms with the pace of change in R</title><link>http://people.fas.harvard.edu/~izahn/posts/coming-to-terms-with-the-pace-of-change-in-r/</link><dc:creator>Ista Zahn</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Is it you or have I become old and cranky?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I've been using R and mostly enjoying it since 2006. Lately I've been having some misgivings about the direction R as a community is headed. Some of these misgivings no doubt stem from reluctance to learn new ways of doing things after investing so much time mastering the old ways, but underneath my old-man crankiness I believe there are real and important challenges facing the R community. R has grown considerably since I started using it a decade ago, and this has mostly been a good thing as new packages implement new and better functionality. Recently, popular contributed packages have been replacing core R functionality with new approaches, leading to a fragmentation of the user base and increasing cognitive load by requiring analysts to choose a package (or set of packages) before they even write the first line of code.
&lt;/p&gt;

&lt;!-- TEASER_END --&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;R is "a large, coherent, integrated collection of intermediate tools for data analysis"&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
The quote is taken from the official R manual &lt;a href="https://cran.r-project.org/doc/manuals/R-intro.html#Introduction-and-preliminaries"&gt;An Introduction to R&lt;/a&gt;. The "coherent" and "integrated" claims have always been questionable in some areas, but this situation is getting far worse as contributed packages re-invent basic R features and replace classic R idioms with new ones. Let me show you what I'm talking about.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-1" class="outline-3"&gt;
&lt;h3 id="sec-2-1"&gt;Is there a coherent integrated "group by" in R?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;p&gt;
Suppose I want to aggregate a data set by calculating group sizes, means, and standard deviations. There are many ways to do it in base R, and none are quite satisfactory.
&lt;/p&gt;

&lt;p&gt;
First up is the &lt;code&gt;tapply&lt;/code&gt; function. It works well for simple aggregation, but won't help us here because it can only handle a single &lt;code&gt;x&lt;/code&gt; variable, and it produces confusing return values if &lt;code&gt;FUN&lt;/code&gt; returns a vector of length greater than one. That is to say, it works fine for calculating a single summary statistic by group
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kp"&gt;tapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;mtcars&lt;span class="o"&gt;$&lt;/span&gt;wt&lt;span class="p"&gt;,&lt;/span&gt; mtcars&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"am"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"cyl"&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
       FUN &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
   cyl
am        4       6        8
  0 2.93500 3.38875 4.104083
  1 2.04225 2.75500 3.370000
&lt;/pre&gt;

&lt;p&gt;
but anything more complicated quickly becomes a mess
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kp"&gt;tapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;mtcars&lt;span class="o"&gt;$&lt;/span&gt;wt&lt;span class="p"&gt;,&lt;/span&gt; mtcars&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"am"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"cyl"&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
	FUN &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;n &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;),&lt;/span&gt; mean &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;),&lt;/span&gt; sd &lt;span class="o"&gt;=&lt;/span&gt; sd&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
   cyl
am  4         6         8        
  0 Numeric,3 Numeric,3 Numeric,3
  1 Numeric,3 Numeric,3 Numeric,3
&lt;/pre&gt;

&lt;p&gt;
Next we might consider the &lt;code&gt;ave&lt;/code&gt; function, but a quick look at the documentation suggests it won't be any better than &lt;code&gt;tapply&lt;/code&gt;. OK, let's try something else. Maybe &lt;code&gt;aggregate&lt;/code&gt; will help us.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;aggregate&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;cbind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;mpg&lt;span class="p"&gt;,&lt;/span&gt; hp&lt;span class="p"&gt;,&lt;/span&gt; wt&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; am &lt;span class="o"&gt;+&lt;/span&gt; cyl&lt;span class="p"&gt;,&lt;/span&gt;
	  data &lt;span class="o"&gt;=&lt;/span&gt; mtcars&lt;span class="p"&gt;,&lt;/span&gt;
	  FUN &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;n &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;),&lt;/span&gt; mean &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;),&lt;/span&gt; sd &lt;span class="o"&gt;=&lt;/span&gt; sd&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
  am cyl      mpg.n   mpg.mean     mpg.sd      hp.n   hp.mean     hp.sd       wt.n    wt.mean      wt.sd
1  0   4  3.0000000 22.9000000  1.4525839   3.00000  84.66667  19.65536  3.0000000  2.9350000  0.4075230
2  1   4  8.0000000 28.0750000  4.4838599   8.00000  81.87500  22.65542  8.0000000  2.0422500  0.4093485
3  0   6  4.0000000 19.1250000  1.6317169   4.00000 115.25000   9.17878  4.0000000  3.3887500  0.1162164
4  1   6  3.0000000 20.5666667  0.7505553   3.00000 131.66667  37.52777  3.0000000  2.7550000  0.1281601
5  0   8 12.0000000 15.0500000  2.7743959  12.00000 194.16667  33.35984 12.0000000  4.1040833  0.7683069
6  1   8  2.0000000 15.4000000  0.5656854   2.00000 299.50000  50.20458  2.0000000  3.3700000  0.2828427
&lt;/pre&gt;

&lt;p&gt;
&lt;code&gt;aggregate&lt;/code&gt; appears to be closer to what we want than &lt;code&gt;tapply&lt;/code&gt;, but it still either requires post-processing to remove the redundant group size column, or multiple calls to produce the desired result, e.g.,
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kp"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;aggregate&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;cbind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;n &lt;span class="o"&gt;=&lt;/span&gt; mpg&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; am &lt;span class="o"&gt;+&lt;/span&gt;cyl&lt;span class="p"&gt;,&lt;/span&gt;
		data &lt;span class="o"&gt;=&lt;/span&gt; mtcars&lt;span class="p"&gt;,&lt;/span&gt;
		FUN &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;length&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      aggregate&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;cbind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;mpg&lt;span class="p"&gt;,&lt;/span&gt; hp&lt;span class="p"&gt;,&lt;/span&gt; wt&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; am &lt;span class="o"&gt;+&lt;/span&gt; cyl&lt;span class="p"&gt;,&lt;/span&gt;
		data &lt;span class="o"&gt;=&lt;/span&gt; mtcars&lt;span class="p"&gt;,&lt;/span&gt;
		FUN &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;mean &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;),&lt;/span&gt; sd &lt;span class="o"&gt;=&lt;/span&gt; sd&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
  am cyl  n   mpg.mean     mpg.sd   hp.mean     hp.sd   wt.mean     wt.sd
1  0   4  3 22.9000000  1.4525839  84.66667  19.65536 2.9350000 0.4075230
2  0   6  4 19.1250000  1.6317169 115.25000   9.17878 3.3887500 0.1162164
3  0   8 12 15.0500000  2.7743959 194.16667  33.35984 4.1040833 0.7683069
4  1   4  8 28.0750000  4.4838599  81.87500  22.65542 2.0422500 0.4093485
5  1   6  3 20.5666667  0.7505553 131.66667  37.52777 2.7550000 0.1281601
6  1   8  2 15.4000000  0.5656854 299.50000  50.20458 3.3700000 0.2828427
&lt;/pre&gt;

&lt;p&gt;
OK, &lt;code&gt;tapply&lt;/code&gt; and &lt;code&gt;ave&lt;/code&gt; were busts, aggregate is close but not quite what we want. How about &lt;code&gt;by&lt;/code&gt;?
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kp"&gt;by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;mtcars&lt;span class="p"&gt;,&lt;/span&gt;
   mtcars&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"am"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"cyl"&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
   FUN &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kp"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;,&lt;/span&gt;
	  &lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;n &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nrow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;),&lt;/span&gt;
	    mpg_mean &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;mpg&lt;span class="p"&gt;),&lt;/span&gt;
	    mpg_sd &lt;span class="o"&gt;=&lt;/span&gt; sd&lt;span class="p"&gt;(&lt;/span&gt;mpg&lt;span class="p"&gt;),&lt;/span&gt;
	    hp_mean &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;hp&lt;span class="p"&gt;),&lt;/span&gt;
	    hp_sd &lt;span class="o"&gt;=&lt;/span&gt; sd&lt;span class="p"&gt;(&lt;/span&gt;hp&lt;span class="p"&gt;),&lt;/span&gt;
	    wt_mean &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;wt&lt;span class="p"&gt;),&lt;/span&gt;
	    wt_sd &lt;span class="o"&gt;=&lt;/span&gt; sd&lt;span class="p"&gt;(&lt;/span&gt;wt&lt;span class="p"&gt;)))&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   simplify &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
 am: 0
cyl: 4
        n  mpg_mean    mpg_sd   hp_mean     hp_sd   wt_mean     wt_sd 
 3.000000 22.900000  1.452584 84.666667 19.655364  2.935000  0.407523 
------------------------------------------------------------------------------------- 
am: 1
cyl: 4
         n   mpg_mean     mpg_sd    hp_mean      hp_sd    wt_mean      wt_sd 
 8.0000000 28.0750000  4.4838599 81.8750000 22.6554156  2.0422500  0.4093485 
------------------------------------------------------------------------------------- 
am: 0
cyl: 6
          n    mpg_mean      mpg_sd     hp_mean       hp_sd     wt_mean       wt_sd 
  4.0000000  19.1250000   1.6317169 115.2500000   9.1787799   3.3887500   0.1162164 
------------------------------------------------------------------------------------- 
am: 1
cyl: 6
          n    mpg_mean      mpg_sd     hp_mean       hp_sd     wt_mean       wt_sd 
  3.0000000  20.5666667   0.7505553 131.6666667  37.5277675   2.7550000   0.1281601 
------------------------------------------------------------------------------------- 
am: 0
cyl: 8
          n    mpg_mean      mpg_sd     hp_mean       hp_sd     wt_mean       wt_sd 
 12.0000000  15.0500000   2.7743959 194.1666667  33.3598379   4.1040833   0.7683069 
------------------------------------------------------------------------------------- 
am: 1
cyl: 8
          n    mpg_mean      mpg_sd     hp_mean       hp_sd     wt_mean       wt_sd 
  2.0000000  15.4000000   0.5656854 299.5000000  50.2045815   3.3700000   0.2828427
&lt;/pre&gt;

&lt;p&gt;
Well, maybe that's better. It's not really any less verbose than the aggregate-and-merge strategy, and the result isn't very friendly. Maybe we should just roll our own.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kp"&gt;do.call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;rbind&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
	&lt;span class="kp"&gt;lapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;mtcars&lt;span class="p"&gt;,&lt;/span&gt; mtcars&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"am"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"cyl"&lt;/span&gt;&lt;span class="p"&gt;)]),&lt;/span&gt;
	       &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
		 &lt;span class="kp"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;,&lt;/span&gt; 
		      &lt;span class="kt"&gt;data.frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;am &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;am&lt;span class="p"&gt;),&lt;/span&gt;
				 cyl &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;cyl&lt;span class="p"&gt;),&lt;/span&gt;
				 n &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nrow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;),&lt;/span&gt;
				 mpg_mean &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;mpg&lt;span class="p"&gt;),&lt;/span&gt;
				 mpg_sd &lt;span class="o"&gt;=&lt;/span&gt; sd&lt;span class="p"&gt;(&lt;/span&gt;mpg&lt;span class="p"&gt;),&lt;/span&gt;
				 hp_mean &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;hp&lt;span class="p"&gt;),&lt;/span&gt;
				 hp_sd &lt;span class="o"&gt;=&lt;/span&gt; sd&lt;span class="p"&gt;(&lt;/span&gt;hp&lt;span class="p"&gt;),&lt;/span&gt;
				 wt_mean &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;wt&lt;span class="p"&gt;),&lt;/span&gt;
				 wt_sd &lt;span class="o"&gt;=&lt;/span&gt; sd&lt;span class="p"&gt;(&lt;/span&gt;wt&lt;span class="p"&gt;)))&lt;/span&gt;
	       &lt;span class="p"&gt;}))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
    am cyl  n mpg_mean    mpg_sd   hp_mean    hp_sd  wt_mean     wt_sd
0.4  0   4  3 22.90000 1.4525839  84.66667 19.65536 2.935000 0.4075230
1.4  1   4  8 28.07500 4.4838599  81.87500 22.65542 2.042250 0.4093485
0.6  0   6  4 19.12500 1.6317169 115.25000  9.17878 3.388750 0.1162164
1.6  1   6  3 20.56667 0.7505553 131.66667 37.52777 2.755000 0.1281601
0.8  0   8 12 15.05000 2.7743959 194.16667 33.35984 4.104083 0.7683069
1.8  1   8  2 15.40000 0.5656854 299.50000 50.20458 3.370000 0.2828427
&lt;/pre&gt;

&lt;p&gt;
By now we've tried four different approaches, but nothing seems to make the calculation particularly natural or convenient. Is this really a "coherent and integrated" collection of functions? It feels more like a haphazard collection of overlapping functions that can be abused in different ways. So here are some questions. 
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;Given that &lt;code&gt;aggregate&lt;/code&gt; appears to be more flexible than &lt;code&gt;tapply&lt;/code&gt; and &lt;code&gt;ave&lt;/code&gt;, do we really need the later two?
&lt;/li&gt;
&lt;li&gt;Can &lt;code&gt;aggregate&lt;/code&gt; be generalized so that we can apply functions to data.frames instead of to the columns of those data.frames?
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-sec-2-2" class="outline-3"&gt;
&lt;h3 id="sec-2-2"&gt;Can we do better?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-2"&gt;
&lt;p&gt;
Of course we can do better. Many an R programmer has gazed out over the rubble of &lt;code&gt;tapply&lt;/code&gt;, &lt;code&gt;ave&lt;/code&gt;, &lt;code&gt;by&lt;/code&gt; and &lt;code&gt;aggregate&lt;/code&gt; and mused "surely I can bring order and harmony to this jumble. Follow me and we will create a 'group by' operation to end all SQL jealousy in the kingdom of R." And what comes of this musing? Let us look with wonder upon the bubbling exuberant creativity of the R community.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-2-1" class="outline-4"&gt;
&lt;h4 id="sec-2-2-1"&gt;doBy::describeBy&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-2-1"&gt;
&lt;p&gt;
Very similar to &lt;code&gt;aggregate&lt;/code&gt;, same limitations.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;doBy&lt;span class="o"&gt;::&lt;/span&gt;summaryBy&lt;span class="p"&gt;(&lt;/span&gt;mpg &lt;span class="o"&gt;+&lt;/span&gt; hp &lt;span class="o"&gt;+&lt;/span&gt; wt &lt;span class="o"&gt;~&lt;/span&gt; am &lt;span class="o"&gt;+&lt;/span&gt; cyl&lt;span class="p"&gt;,&lt;/span&gt;
		data &lt;span class="o"&gt;=&lt;/span&gt; mtcars&lt;span class="p"&gt;,&lt;/span&gt;
		FUN &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;n &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;),&lt;/span&gt; mean &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;),&lt;/span&gt; sd &lt;span class="o"&gt;=&lt;/span&gt; sd&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
  am cyl mpg.n mpg.mean    mpg.sd hp.n   hp.mean    hp.sd wt.n  wt.mean     wt.sd
1  0   4     3 22.90000 1.4525839    3  84.66667 19.65536    3 2.935000 0.4075230
2  0   6     4 19.12500 1.6317169    4 115.25000  9.17878    4 3.388750 0.1162164
3  0   8    12 15.05000 2.7743959   12 194.16667 33.35984   12 4.104083 0.7683069
4  1   4     8 28.07500 4.4838599    8  81.87500 22.65542    8 2.042250 0.4093485
5  1   6     3 20.56667 0.7505553    3 131.66667 37.52777    3 2.755000 0.1281601
6  1   8     2 15.40000 0.5656854    2 299.50000 50.20458    2 3.370000 0.2828427
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-2-2" class="outline-4"&gt;
&lt;h4 id="sec-2-2-2"&gt;Hmisc::summary.formula&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-2-2"&gt;
&lt;p&gt;
Similar to aggregate, large number of confusing options. This one automatically computes N for each group, so it actually works for our example.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Hmisc&lt;span class="o"&gt;::&lt;/span&gt;summary.formula&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;cbind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;mpg&lt;span class="p"&gt;,&lt;/span&gt; hp&lt;span class="p"&gt;,&lt;/span&gt; wt&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; am &lt;span class="o"&gt;+&lt;/span&gt; cyl&lt;span class="p"&gt;,&lt;/span&gt;
		       data &lt;span class="o"&gt;=&lt;/span&gt; mtcars&lt;span class="p"&gt;,&lt;/span&gt;
		       fun &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
			 &lt;span class="kp"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;,&lt;/span&gt;
			       &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
			       FUN &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;y&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
				 &lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;mean &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;y&lt;span class="p"&gt;),&lt;/span&gt; sd &lt;span class="o"&gt;=&lt;/span&gt; sd&lt;span class="p"&gt;(&lt;/span&gt;y&lt;span class="p"&gt;))&lt;/span&gt;
			       &lt;span class="p"&gt;})&lt;/span&gt;
		       &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
 cbind(mpg, hp, wt)    N=32

+-------+---+--+--------+--------+---------+--------+--------+---------+
|       |   |N |mpg mean|mpg sd  |hp mean  |hp sd   |wt mean |wt sd    |
+-------+---+--+--------+--------+---------+--------+--------+---------+
|am     |No |19|17.14737|3.833966|160.26316|53.90820|3.768895|0.7774001|
|       |Yes|13|24.39231|6.166504|126.84615|84.06232|2.411000|0.6169816|
+-------+---+--+--------+--------+---------+--------+--------+---------+
|cyl    |4  |11|26.66364|4.509828| 82.63636|20.93453|2.285727|0.5695637|
|       |6  | 7|19.74286|1.453567|122.28571|24.26049|3.117143|0.3563455|
|       |8  |14|15.10000|2.560048|209.21429|50.97689|3.999214|0.7594047|
+-------+---+--+--------+--------+---------+--------+--------+---------+
|Overall|   |32|20.09062|6.026948|146.68750|68.56287|3.217250|0.9784574|
+-------+---+--+--------+--------+---------+--------+--------+---------+
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-2-3" class="outline-4"&gt;
&lt;h4 id="sec-2-2-3"&gt;dplyr::summarize&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-2-3"&gt;
&lt;p&gt;
This one is very popular, and for good reason. It works well.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dplyr&lt;span class="o"&gt;::&lt;/span&gt;summarize&lt;span class="p"&gt;(&lt;/span&gt;dplyr&lt;span class="o"&gt;::&lt;/span&gt;group_by&lt;span class="p"&gt;(&lt;/span&gt;mtcars&lt;span class="p"&gt;,&lt;/span&gt; am&lt;span class="p"&gt;,&lt;/span&gt; cyl&lt;span class="p"&gt;),&lt;/span&gt;
		 n &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;mpg&lt;span class="p"&gt;),&lt;/span&gt;
		 mean_mpg &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;mpg&lt;span class="p"&gt;),&lt;/span&gt;
		 sd_mpg &lt;span class="o"&gt;=&lt;/span&gt; sd&lt;span class="p"&gt;(&lt;/span&gt;mpg&lt;span class="p"&gt;),&lt;/span&gt;
		 mean_hp &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;hp&lt;span class="p"&gt;),&lt;/span&gt;
		 sd_hp &lt;span class="o"&gt;=&lt;/span&gt; sd&lt;span class="p"&gt;(&lt;/span&gt;hp&lt;span class="p"&gt;),&lt;/span&gt;
		 mean_wt &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;wt&lt;span class="p"&gt;),&lt;/span&gt;
		 sd_hp &lt;span class="o"&gt;=&lt;/span&gt; sd&lt;span class="p"&gt;(&lt;/span&gt;hp&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
 Source: local data frame [6 x 8]
Groups: am [?]

     am   cyl     n mean_mpg    sd_mpg   mean_hp    sd_hp  mean_wt
  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
1     0     4     3 22.90000 1.4525839  84.66667 19.65536 2.935000
2     0     6     4 19.12500 1.6317169 115.25000  9.17878 3.388750
3     0     8    12 15.05000 2.7743959 194.16667 33.35984 4.104083
4     1     4     8 28.07500 4.4838599  81.87500 22.65542 2.042250
5     1     6     3 20.56667 0.7505553 131.66667 37.52777 2.755000
6     1     8     2 15.40000 0.5656854 299.50000 50.20458 3.370000
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-2-4" class="outline-4"&gt;
&lt;h4 id="sec-2-2-4"&gt;dplyr::do&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-2-4"&gt;
&lt;p&gt;
If you have a large number of columns to summarize you might not want to type them all out. In that case you can use &lt;code&gt;do&lt;/code&gt;.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;do&lt;span class="p"&gt;(&lt;/span&gt;group_by&lt;span class="p"&gt;(&lt;/span&gt;mtcars&lt;span class="p"&gt;,&lt;/span&gt; am&lt;span class="p"&gt;,&lt;/span&gt; cyl&lt;span class="p"&gt;),&lt;/span&gt;
   &lt;span class="kp"&gt;as.data.frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;n &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;ncol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;.&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
		   &lt;span class="kp"&gt;as.list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;sapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;.&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mpg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"wt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"hp"&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
				  &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;mean &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)))),&lt;/span&gt;
		   &lt;span class="kp"&gt;as.list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;sapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;.&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mpg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"wt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"hp"&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
				  &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;sd &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)))))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
 Source: local data frame [6 x 9]
Groups: am, cyl [6]

     am   cyl     n mpg.mean  wt.mean   hp.mean   mpg.sd    wt.sd     hp.sd
  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
1     0     4    11 22.90000 2.935000  84.66667 22.90000 2.935000  84.66667
2     0     6    11 19.12500 3.388750 115.25000 19.12500 3.388750 115.25000
3     0     8    11 15.05000 4.104083 194.16667 15.05000 4.104083 194.16667
4     1     4    11 28.07500 2.042250  81.87500 28.07500 2.042250  81.87500
5     1     6    11 20.56667 2.755000 131.66667 20.56667 2.755000 131.66667
6     1     8    11 15.40000 3.370000 299.50000 15.40000 3.370000 299.50000
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-2-5" class="outline-4"&gt;
&lt;h4 id="sec-2-2-5"&gt;tables::tabular&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-2-5"&gt;
&lt;p&gt;
This one focuses on creating LaTeX and HTML tables. It creates its own SAS-inspired mini-language that is IMO very confusing, though possibly worth it if you frequently need to create complex publication ready tables.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#library(tables)&lt;/span&gt;
tables&lt;span class="o"&gt;::&lt;/span&gt;tabular&lt;span class="p"&gt;((&lt;/span&gt;Factor&lt;span class="p"&gt;(&lt;/span&gt;am&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;Factor&lt;span class="p"&gt;(&lt;/span&gt;cyl&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;n &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;mpg &lt;span class="o"&gt;+&lt;/span&gt; wt &lt;span class="o"&gt;+&lt;/span&gt; hp&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;mean &lt;span class="o"&gt;+&lt;/span&gt; sd&lt;span class="p"&gt;),&lt;/span&gt; data &lt;span class="o"&gt;=&lt;/span&gt; mtcars&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
                                                 
          mpg          wt           hp           
am cyl n  mean  sd     mean  sd     mean   sd    
0  4    3 22.90 1.4526 2.935 0.4075  84.67 19.655
   6    4 19.12 1.6317 3.389 0.1162 115.25  9.179
   8   12 15.05 2.7744 4.104 0.7683 194.17 33.360
1  4    8 28.07 4.4839 2.042 0.4093  81.88 22.655
   6    3 20.57 0.7506 2.755 0.1282 131.67 37.528
   8    2 15.40 0.5657 3.370 0.2828 299.50 50.205
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-2-6" class="outline-4"&gt;
&lt;h4 id="sec-2-2-6"&gt;data.table::`[`&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-2-6"&gt;
&lt;p&gt;
The data.table package implements an alternative to the venerable &lt;code&gt;data.frame&lt;/code&gt; class in R and provides sophisticated manipulation via an indexing-like interface.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;as.data.table&lt;span class="p"&gt;(&lt;/span&gt;mtcars&lt;span class="p"&gt;)[,&lt;/span&gt;
		      &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;n &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;.&lt;/span&gt;N&lt;span class="p"&gt;,&lt;/span&gt;
			   mpg_mean &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;mpg&lt;span class="p"&gt;),&lt;/span&gt;
			   mpg_sd &lt;span class="o"&gt;=&lt;/span&gt; sd&lt;span class="p"&gt;(&lt;/span&gt;mpg&lt;span class="p"&gt;),&lt;/span&gt;
			   wt_mean &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;wt&lt;span class="p"&gt;),&lt;/span&gt;
			   wt_sd &lt;span class="o"&gt;=&lt;/span&gt; sd&lt;span class="p"&gt;(&lt;/span&gt;wt&lt;span class="p"&gt;),&lt;/span&gt;
			   hp_mean &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;hp&lt;span class="p"&gt;),&lt;/span&gt;
			   hp_sd &lt;span class="o"&gt;=&lt;/span&gt; sd&lt;span class="p"&gt;(&lt;/span&gt;hp&lt;span class="p"&gt;)),&lt;/span&gt;
		      by &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"am"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"cyl"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Are we done yet? Well, I'm going to stop, but we could go on. There are at least 9 ways to skin this particular cat in R. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-3" class="outline-3"&gt;
&lt;h3 id="sec-2-3"&gt;How do I &lt;span class="underline"&gt;_&lt;/span&gt; in R?&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-3"&gt;
&lt;p&gt;
So there are lots of ways to calculate statistics by some grouping variable(s) in R. Why can't you be happy that you have so many excellent choices?
&lt;/p&gt;

&lt;p&gt;
I can't be happy about it because it makes my life more difficult. First, I need to identify my options. Then I need to evaluate them, and learn the particulars of my chosen package. This all takes effort that I would rather spend on other things. Now, if this problem was limited to the domain of calculating statistics by group, I wouldn't be writing this post. But this issue is almost everywhere in R.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-3-1" class="outline-4"&gt;
&lt;h4 id="sec-2-3-1"&gt;How do I read text data?&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-3-1"&gt;
&lt;p&gt;
I have a .csv file I want to read into R. Should I use
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;read.csv
&lt;/li&gt;
&lt;li&gt;readr::read&lt;sub&gt;csv&lt;/sub&gt;
&lt;/li&gt;
&lt;li&gt;data.table::fread
&lt;/li&gt;
&lt;li&gt;rio::import
&lt;/li&gt;
&lt;li&gt;hypoparsr::parse&lt;sub&gt;file&lt;/sub&gt;
&lt;/li&gt;
&lt;li&gt;cvsread::cvsread
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
or something else?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-3-2" class="outline-4"&gt;
&lt;h4 id="sec-2-3-2"&gt;How do I fit a linear regression model?&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-3-2"&gt;
&lt;p&gt;
I want to fit a simple linear regression model. Should I use
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;lm
&lt;/li&gt;
&lt;li&gt;rms::ols
&lt;/li&gt;
&lt;li&gt;Zelig::zlm
&lt;/li&gt;
&lt;li&gt;glm2::glm2
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
or something else?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-3-3" class="outline-4"&gt;
&lt;h4 id="sec-2-3-3"&gt;How do I make a table from model coefficients?&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-2-3-3"&gt;
&lt;p&gt;
I've fit a model and would like to put the results in a nice table. Should I use
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;xtable::xtable
&lt;/li&gt;
&lt;li&gt;rockchalk::outreg
&lt;/li&gt;
&lt;li&gt;apsrtable::apsrtable
&lt;/li&gt;
&lt;li&gt;htmlTable::htmlTable
&lt;/li&gt;
&lt;li&gt;etable::tabular.ade
&lt;/li&gt;
&lt;li&gt;knitr::ktable
&lt;/li&gt;
&lt;li&gt;texreg::texreg
&lt;/li&gt;
&lt;li&gt;stargazer::stargazer
&lt;/li&gt;
&lt;li&gt;ascii::ascii
&lt;/li&gt;
&lt;li&gt;estout::esttab
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
or some other thing?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-4" class="outline-3"&gt;
&lt;h3 id="sec-2-4"&gt;&lt;span class="todo TODO"&gt;TODO&lt;/span&gt; Summary [summarize the post thus far]&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-4"&gt;
&lt;p&gt;
There is an overwhelming number of choices for doing just about anything in R.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;What is R really?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
OK, so there is some duplication among R functions and packages and people need to choose. There are both good and bad consequences of this, but the totality of the situation is that &lt;b&gt;it is no longer clear what R is&lt;/b&gt;.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3-1" class="outline-3"&gt;
&lt;h3 id="sec-3-1"&gt;R is not data.frames&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-1"&gt;
&lt;p&gt;
Most people who use R use it for statistical analysis and graphics. The basic data structure in most popular statistical package is a rectangular structure with variables in the columns and observations in the rows. In R this structure is called a &lt;code&gt;data.frame&lt;/code&gt; and learning how to operate on and with data.frames is a basic skill that any R user must have.
&lt;/p&gt;

&lt;p&gt;
The previous sentence may have been true at one time, but it no longer is. There are now at least three popular alternatives; &lt;code&gt;data.frame&lt;/code&gt;, &lt;code&gt;data.table&lt;/code&gt; and &lt;code&gt;tibble&lt;/code&gt;. It is now possible to carry out sophisticated data manipulation and analysis in R without ever learning fundamental &lt;code&gt;data.frame&lt;/code&gt; methods such as `[.data.frame`. All of these methods work differently.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kp"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;mtcars&lt;span class="p"&gt;)[,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
[1] 21.0 21.0 22.8 21.4 18.7 18.1
&lt;/pre&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;as.data.table&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;mtcars&lt;span class="p"&gt;))[,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
[1] 1
&lt;/pre&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;as_tibble&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;mtcars&lt;span class="p"&gt;))[,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
# A tibble: 6 × 1
    mpg
  &amp;lt;dbl&amp;gt;
1  21.0
2  21.0
3  22.8
4  21.4
5  18.7
6  18.1
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3-2" class="outline-3"&gt;
&lt;h3 id="sec-3-2"&gt;R is not a language that uses parenthetical argument lists, like c&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-2"&gt;
&lt;p&gt;
One of the first things I used to teach people about R is that function calls have the form &lt;code&gt;functionName(arg1, arg2, ..., argn)&lt;/code&gt;, and that even when all arguments are optional and you want to accept the defaults you need the &lt;code&gt;()&lt;/code&gt; after the function name. This is no longer true. Many people now write strange looking R expressions like
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;magrittr&lt;span class="p"&gt;)&lt;/span&gt;
mtcars &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt; &lt;span class="kp"&gt;head&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
R has always had flexible syntax, but with developments like this you can write R that looks nothing like what us old-timers expect R code to be.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3-3" class="outline-3"&gt;
&lt;h3 id="sec-3-3"&gt;R is not coherent&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-3"&gt;
&lt;p&gt;
There is no &lt;a href="https://www.python.org/dev/peps/pep-0020/#the-zen-of-python"&gt;zen-like "one obvious way to do it"&lt;/a&gt; it R. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3-4" class="outline-3"&gt;
&lt;h3 id="sec-3-4"&gt;R is being built phoenix-like from its own ashes&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-4"&gt;
&lt;p&gt;
There is good news and there is bad news. The good news is that new and more coherent and integrated zones are being carved out of the R landscape. For example, the &lt;a href="https://blog.rstudio.org/2016/09/15/tidyverse-1-0-0/"&gt;tidyverse&lt;/a&gt; brings greater simplicity and constancy to many common operations in R. The bad news is that you can't escape the cold hard &lt;a href="http://xkcd.com/927/"&gt;XKCD reality&lt;/a&gt; that producing a "better" way of doing things means there is &lt;span class="underline"&gt;one more&lt;/span&gt; way of doing that thing. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;And now, the thrilling conclusion&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
Now finally we've reach the part of the blog where I tell you how everyone is doing it wrong and if you would just listen to me we could solve all our problems. The truth is I don't have great answers or solutions for these issues. The best I can do is offer some general thoughts.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-4-1" class="outline-3"&gt;
&lt;h3 id="sec-4-1"&gt;It could be worse&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-4-1"&gt;
&lt;p&gt;
This post probably sounds critical of R, but don't get me wrong, I'm a huge fan of R. Every time I venture into Python, Javascript, Scala, or even Julia it makes me appreciate R even more. R is easy and useful, and having too much choice is certainly better than having too little.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-4-2" class="outline-3"&gt;
&lt;h3 id="sec-4-2"&gt;We can do better&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-4-2"&gt;
&lt;p&gt;
Collaborate more. Update documentation to recommend current best-of-breed packages.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>R</category><guid>http://people.fas.harvard.edu/~izahn/posts/coming-to-terms-with-the-pace-of-change-in-r/</guid><pubDate>Tue, 20 Sep 2016 13:58:33 GMT</pubDate></item><item><title>Extracting content from .pdf files</title><link>http://people.fas.harvard.edu/~izahn/posts/extracting-content-from-pdf-files/</link><dc:creator>Ista Zahn</dc:creator><description>&lt;p&gt;
One of common question I get as a &lt;a href="http://dss.iq.harvard.edu"&gt;data science consultant&lt;/a&gt; involves extracting content from &lt;code&gt;.pdf&lt;/code&gt; files. In the best-case scenario the content can be extracted to consistently formatted text files and parsed from there into a usable form. In the worst case the file will need to be run through an optical character recognition (OCR) program to extract the text.
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Overview of available tools&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
For years &lt;code&gt;pdftotext&lt;/code&gt; from the &lt;a href="https://poppler.freedesktop.org/"&gt;poppler&lt;/a&gt; project was my go-to answer for the easy case. This is still a good option, especially on Mac (using &lt;a href="http://brew.sh"&gt;homebrew&lt;/a&gt;) or Linux where installation is easy. Windows users can install poppler binaries from &lt;a href="http://blog.alivate.com.au/poppler-windows/"&gt;&lt;/a&gt;&lt;a href="http://blog.alivate.com.au/poppler-windows/"&gt;http://blog.alivate.com.au/poppler-windows/&lt;/a&gt; (make sure to &lt;a href="http://www.computerhope.com/issues/ch000549.htm"&gt;add the &lt;code&gt;bin&lt;/code&gt; directory to your &lt;code&gt;PATH&lt;/code&gt;&lt;/a&gt;). More recently I've been using the excellent &lt;a href="https://github.com/ropensci/pdftools"&gt;pdftools&lt;/a&gt; packge in &lt;a href="http://r-project.org"&gt;R&lt;/a&gt; to more easily extract and manipulate text stored in &lt;code&gt;.pdf&lt;/code&gt; files.
&lt;/p&gt;

&lt;p&gt;
In the more difficult case where the pdf contains images rather than text it is necessary to use optical character recognition (OCR) to recover the text. This can be achieved using point-and-click applications like &lt;a href="http://www.paperfile.net/"&gt;freeOCR&lt;/a&gt;, &lt;a href="https://acrobat.adobe.com/us/en/acrobat.html"&gt;Adobe Acrobat&lt;/a&gt; or &lt;a href="https://www.abbyy.com/"&gt;ABBYY&lt;/a&gt;. ABBYY even has a convenient &lt;a href="http://ocrsdk.com/"&gt;cloud OCR service&lt;/a&gt; that can be easily accessed from R using the &lt;a href="https://cran.rstudio.com/web/packages/abbyyR/index.html"&gt;abbyyR&lt;/a&gt; package. If you don't have a license for one of these expensive OCR solutions, or if you prefer something you easily can script from the command line, &lt;a href="https://github.com/tesseract-ocr/tesseract"&gt;tesseract&lt;/a&gt; is a very good option.
&lt;/p&gt;

&lt;!-- TEASER_END --&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;An easy example&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
In the case where the &lt;code&gt;pdf&lt;/code&gt; contains text, extracting it is usually not too difficult. As an example, consider the &lt;code&gt;.pdf&lt;/code&gt; file at &lt;a href="http://www.cdc.gov/nchs/data/nvsr/nvsr65/nvsr65_05.pdf"&gt;http://www.cdc.gov/nchs/data/nvsr/nvsr65/nvsr65_05.pdf&lt;/a&gt;. Wouldn't it be nice to extract the data in those tables so we can visualize it in different ways?&lt;sup&gt;&lt;a id="fnr.1" name="fnr.1" class="footref" href="http://people.fas.harvard.edu/~izahn/posts/extracting-content-from-pdf-files/#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt; We can, using the &lt;code&gt;pdftotext&lt;/code&gt; utility provided by the poppler project.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl -o nvsr65_05.pdf http://www.cdc.gov/nchs/data/nvsr/nvsr65/nvsr65_05.pdf
pdftotext nvsr65_05.pdf nvsr65_05.txt
head nvsr65_05.txt
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
National Vital
Statistics Reports
Volume 65, Number 5

June 30, 2016

Deaths: Leading Causes for 2014
by Melonie Heron, Ph.D., Division of Vital Statistics

Abstract
&lt;/pre&gt;

&lt;p&gt;
We can achieve a similar result in R using the &lt;code&gt;pdftools&lt;/code&gt; package.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;pdftools&lt;span class="p"&gt;)&lt;/span&gt;
nvsr65_05 &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; pdf_text&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http://www.cdc.gov/nchs/data/nvsr/nvsr65/nvsr65_05.pdf"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kp"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;strsplit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;nvsr65_05&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="s"&gt;"\n"&lt;/span&gt;&lt;span class="p"&gt;)[[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
[1] "National Vital"                                                                                                                          
[2] "Statistics Reports"                                                                                                                      
[3] "Volume 65, Number 5                                                                                                        June 30, 2016"
[4] "Deaths: Leading Causes for 2014"                                                                                                         
[5] "by Melonie Heron, Ph.D., Division of Vital Statistics"                                                                                   
[6] "Abstract                                                                 Introduction"
&lt;/pre&gt;

&lt;p&gt;
Once the text has been liberated from the pdf we can parse it into a usable form and proceed from there. This is often tedious and delicate work, but with some care the data can usually be coerced into shape. For example, table G can be extracted using a few well crafted regular expressions.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;readr&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;stringr&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;magrittr&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;dplyr&lt;span class="p"&gt;)&lt;/span&gt;
table_data &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; nvsr65_05&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  str_split&lt;span class="p"&gt;(&lt;/span&gt;pattern &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"\n"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="kp"&gt;unlist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  str_subset&lt;span class="p"&gt;(&lt;/span&gt;pattern &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"^[^…].*(\\. ){5}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  str_c&lt;span class="p"&gt;(&lt;/span&gt;collapse &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"\n"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  read_table&lt;span class="p"&gt;(&lt;/span&gt;col_names &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  mutate&lt;span class="p"&gt;(&lt;/span&gt;X2 &lt;span class="o"&gt;=&lt;/span&gt; str_replace_all&lt;span class="p"&gt;(&lt;/span&gt;X2&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"(\\. )*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
	 X5 &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;rep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Neonatal"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Postnatal"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; each &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  set_names&lt;span class="p"&gt;(&lt;/span&gt;value &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"rank"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"cause_of_death"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"deaths"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"percent"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"group"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
table_data
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
# A tibble: 20 x 5
    rank
   &amp;lt;int&amp;gt;
1      1
2      2
3      3
4      4
5      5
6      6
7      7
8      8
9      9
10    10
11     1
12     2
13     3
14     4
15     5
16     6
17     7
18     8
19     9
20    10
# ... with 4 more variables: cause_of_death &amp;lt;chr&amp;gt;, deaths &amp;lt;dbl&amp;gt;, percent &amp;lt;dbl&amp;gt;,
#   group &amp;lt;chr&amp;gt;
&lt;/pre&gt;

&lt;p&gt;
Once the data has been liberated from the &lt;code&gt;.pdf&lt;/code&gt; it can be used anyway we like–for example, we can convert the table to a graph to make it easier to compare the prevelance of different causes.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;ggplot2&lt;span class="p"&gt;)&lt;/span&gt;
ggplot&lt;span class="p"&gt;(&lt;/span&gt;mutate&lt;span class="p"&gt;(&lt;/span&gt;table_data&lt;span class="p"&gt;,&lt;/span&gt; cause_of_death &lt;span class="o"&gt;=&lt;/span&gt; reorder&lt;span class="p"&gt;(&lt;/span&gt;cause_of_death&lt;span class="p"&gt;,&lt;/span&gt; deaths&lt;span class="p"&gt;)),&lt;/span&gt;
       aes&lt;span class="p"&gt;(&lt;/span&gt;x &lt;span class="o"&gt;=&lt;/span&gt; cause_of_death&lt;span class="p"&gt;,&lt;/span&gt; y &lt;span class="o"&gt;=&lt;/span&gt; percent&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
  geom_bar&lt;span class="p"&gt;(&lt;/span&gt;aes&lt;span class="p"&gt;(&lt;/span&gt;fill &lt;span class="o"&gt;=&lt;/span&gt; deaths&lt;span class="p"&gt;),&lt;/span&gt; stat&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"identity"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
  facet_wrap&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;group&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
  coord_flip&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
  theme_minimal&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://people.fas.harvard.edu/~izahn/example_files/blog/pdf_extraction/cod.png" alt="cod.png"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;A more difficult example&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
The example above was relatively easy, because the pdf contained information stored as text. For many older pdfs (especialy old scanned documents) the information will instead be stored as images. This makes life much more difficult, but with a little work the data can be liberated. This &lt;a href="http://people.fas.harvard.edu/~izahn/example_files/blog/pdf_extraction/BLS_employment_costs_documentation.pdf"&gt;example pdf file&lt;/a&gt; contains a code-book for old employment data sets. Lets see if this information can be extracted into a machine-readable form.
&lt;/p&gt;

&lt;p&gt;
As mentioned in &lt;a href="http://people.fas.harvard.edu/~izahn/posts/extracting-content-from-pdf-files/#sec-1"&gt;Overview of available tools&lt;/a&gt; there are several optinos to choose from. In this example I'm going to use &lt;a href="https://github.com/tesseract-ocr/tesseract"&gt;tesseract&lt;/a&gt; because it is free and easily script-able. The tesseract program cannot process pdf files directly, so the first step is to convert each page of the pdf to an image. This can be done using the &lt;code&gt;pdftocairo&lt;/code&gt; utility (part of the &lt;a href="https://poppler.freedesktop.org/"&gt;poppler&lt;/a&gt; project). The information I want is on pages 32 to 186, so I'll convert just those pages.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ../files/example_files/blog/pdf_extraction
pdftocairo -png BLS_employment_costs_documentation.pdf -f &lt;span class="m"&gt;32&lt;/span&gt; -l 186
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Once the pdf pages have been converted to an image format (&lt;code&gt;.png&lt;/code&gt; in this example) they can be converted to text using &lt;code&gt;tesseract&lt;/code&gt;. The quality of the conversion depends on lots of things, but mostly the quality of the original images. In this example the quality is variable and generally poor, but useful information can still be extracted.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ../files/example_files/blog/pdf_extraction
&lt;span class="k"&gt;for&lt;/span&gt; imageFile in *.png
   &lt;span class="k"&gt;do&lt;/span&gt;
   tesseract &lt;span class="se"&gt;\&lt;/span&gt;
   -c &lt;span class="nv"&gt;tessedit_char_whitelist&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 :/()-"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
		     &lt;span class="nv"&gt;$imageFile&lt;/span&gt; &lt;span class="nv"&gt;$imageFile&lt;/span&gt;
   &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Now that we have freed the information from the confines of the &lt;code&gt;.pdf&lt;/code&gt; file we will usualy want to re-assemble the information extracted from each page and clean things up. I'm using R for this, though many of my colleagues prefer python for this sort of thing.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;text_data &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;list.files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"../files/example_files/blog/pdf_extraction"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
			pattern &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"\\.txt$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
			full.names &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="kp"&gt;lapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;FUN &lt;span class="o"&gt;=&lt;/span&gt; read_lines&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="kp"&gt;lapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;FUN &lt;span class="o"&gt;=&lt;/span&gt; str_subset&lt;span class="p"&gt;,&lt;/span&gt; pattern &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"(^DATA DESCRIPTION:)|(^SOURCE:)|(^SIZE:)|(^TYPE:)"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="kp"&gt;lapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;FUN &lt;span class="o"&gt;=&lt;/span&gt; str_split_fixed&lt;span class="p"&gt;,&lt;/span&gt; pattern &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;": *"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; n &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class="kp"&gt;lapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;FUN &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    dtmp &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;data.frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;as.list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; stringsAsFactors &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kp"&gt;names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;dtmp&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; x&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="kr"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;dtmp&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  bind_rows&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kp"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;text_data&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
                                        DATA DESCRIPTION
1  Schedule (Sele5:1i2 x-1)yuxgm:glzzezy-    g m:   - nu
2                            SchedulejSelem-leyugqberm  
3                                                   &amp;lt;NA&amp;gt;
4                               City Size Classification
5 Original Standgrjiqdqstrial Classificatigg- (SIC) pcde
6        Original Egtabhshcpegt Size Classification u - 
                     SOURCE                        SIZE        TYPE
1 iEEC/DCC Qqntrol File - m  CHARACTERm): 5 BYTE(S) : 5 Character I
2                      &amp;lt;NA&amp;gt;    CHARACTERGL: 5 BYTE(5) : : Character
3     EEC/DCC Contr-ol File     CHARACTERGH 2 BYTE(S) :   Character
4      EEC/DCC Controi File I CHARACTERS) : 1 BYTE(S) : i Character
5      EEC/DOC Control File                        &amp;lt;NA&amp;gt;        &amp;lt;NA&amp;gt;
6      EEC/DOC Control File                        &amp;lt;NA&amp;gt; 0 Character
&lt;/pre&gt;

&lt;p&gt;
It is cleary that many characters were not recognized correctly. However, there is enough imformation to be useful, especially if we spend a little more effort cleaning things up. The &lt;a href="https://github.com/ropensci/hunspell#readme"&gt;hunspell&lt;/a&gt; package in R can be useful if you know the recovered information should be dictionary words.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;hunspell&lt;span class="p"&gt;)&lt;/span&gt;
text_data&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kp"&gt;is.na&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;text_data&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
text_data&lt;span class="o"&gt;$&lt;/span&gt;TYPE &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; str_to_lower&lt;span class="p"&gt;(&lt;/span&gt;text_data&lt;span class="o"&gt;$&lt;/span&gt;TYPE&lt;span class="p"&gt;)&lt;/span&gt;
text_data&lt;span class="o"&gt;$&lt;/span&gt;TYPE &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; str_replace_all&lt;span class="p"&gt;(&lt;/span&gt;text_data&lt;span class="o"&gt;$&lt;/span&gt;TYPE&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"(^| ).( |$)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
type_bad_words &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; hunspell&lt;span class="p"&gt;(&lt;/span&gt;str_c&lt;span class="p"&gt;(&lt;/span&gt;text_data&lt;span class="o"&gt;$&lt;/span&gt;TYPE&lt;span class="p"&gt;,&lt;/span&gt; collapse &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;))[[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
type_replacement_words &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;sapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;hunspell_suggest&lt;span class="p"&gt;(&lt;/span&gt;type_bad_words&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt; x&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
type_bad_words &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; str_c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"(^|\\W)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;type_bad_words&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"(\\W|$)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; sep &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
type_replacement_words &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; str_c&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"\\1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; type_replacement_words&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"\\2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kr"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;i &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kp"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;type_bad_words&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  text_data&lt;span class="o"&gt;$&lt;/span&gt;TYPE &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; str_replace_all&lt;span class="p"&gt;(&lt;/span&gt;text_data&lt;span class="o"&gt;$&lt;/span&gt;TYPE&lt;span class="p"&gt;,&lt;/span&gt;
				    type_bad_words&lt;span class="p"&gt;[&lt;/span&gt;i&lt;span class="p"&gt;],&lt;/span&gt;
				    type_replacement_words&lt;span class="p"&gt;[&lt;/span&gt;i&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

text_data&lt;span class="o"&gt;$&lt;/span&gt;TYPE &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; str_replace_all&lt;span class="p"&gt;(&lt;/span&gt;text_data&lt;span class="o"&gt;$&lt;/span&gt;TYPE&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;" +"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
text_data&lt;span class="o"&gt;$&lt;/span&gt;TYPE &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; str_trim&lt;span class="p"&gt;(&lt;/span&gt;text_data&lt;span class="o"&gt;$&lt;/span&gt;TYPE&lt;span class="p"&gt;,&lt;/span&gt; side &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'both'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Even after all that there are still some errors, but we've managed to correctly retrieve the type information for the majority of the variables in this dictionary.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;count&lt;span class="p"&gt;(&lt;/span&gt;text_data&lt;span class="p"&gt;,&lt;/span&gt; TYPE&lt;span class="p"&gt;,&lt;/span&gt; sort &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
# A tibble: 10 x 2
             TYPE     n
            &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt;
1       character    65
2   fixed decimal    42
3                    41
4      charioteer     1
5      chm-gage:-     1
6  fixed decimal)     1
7  fixed-decimal:     1
8   fixed deem-ll     1
9     hexadecimal     1
10     tee-rater-     1
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;Concluding remarks&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
I covered a lot of ground in this post, from graphical OCR programs to spell checking packages in R. The take-away messages as I seem them are:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;The &lt;a href="https://github.com/ropensci/hunspell#readme"&gt;pdftools&lt;/a&gt; package is great news for R users who need to work with &lt;code&gt;.pdf&lt;/code&gt; files. It makes it easy to extract and manipulate pdf content and metadata no matter what operating system you use, all from within R.
&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://github.com/tesseract-ocr/tesseract"&gt;tesseract&lt;/a&gt; OCR program is very capable, but don't expect miracles. If the original image quality is poor you can expect to spend a lot of time cleaning up the resulting text.
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" name="fn.1" class="footnum" href="http://people.fas.harvard.edu/~izahn/posts/extracting-content-from-pdf-files/#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;p class="footpara"&gt;
I'm sure these data are available somewhere in more convenient form, but a) I couldn't find them and b) I needed an example pdf with interesting content.
&lt;/p&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</description><category>OCR</category><category>pdf</category><category>R</category><guid>http://people.fas.harvard.edu/~izahn/posts/extracting-content-from-pdf-files/</guid><pubDate>Fri, 12 Aug 2016 22:13:28 GMT</pubDate></item><item><title>Useless but fun R packages</title><link>http://people.fas.harvard.edu/~izahn/posts/useless-but-fun-r-packages/</link><dc:creator>Ista Zahn</dc:creator><description>&lt;p&gt;
&lt;a href="http://r-project.org"&gt;R&lt;/a&gt; is useful for many things. But, it is not only useful! There is plenty of fun to be had as well. In celebration of Summer I'm going to take a look at some useless (but fun!) R packages.
&lt;/p&gt;

&lt;!-- TEASER_END --&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Fortune teller&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
&lt;a href="https://cran.r-project.org/web/packages/fortunes/index.html"&gt;fortunes&lt;/a&gt; is probably the best-known "just for fun" R package. It is maintained by Achim Zeileis and features contributions from such R luminaries as Peter Dalgaard, Uwe Ligges, Kevin Wright, and many others. The &lt;code&gt;fortunes&lt;/code&gt; package been amusing bored statisticians and programmers since 2004. Since that time the &lt;code&gt;fortunes&lt;/code&gt; package developers have been selecting amusing quotes from the &lt;a href="https://stat.ethz.ch/mailman/listinfo/r-help"&gt;R-help mailing list&lt;/a&gt; and other sources and compiling them for your enjoyment. Let's take a look.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;## install.packages("fortunes") # if you don't already have it&lt;/span&gt;
&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;fortunes&lt;span class="p"&gt;)&lt;/span&gt;
fortune&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
When in doubt, keep adding slashes until it works.
   -- Joran Elias (on how to escape a backslash in R)
      Stackoverflow (March 2015)
&lt;/pre&gt;

&lt;p&gt;
When called without arguments, the &lt;code&gt;fortune&lt;/code&gt; function will select a random fortune. Calling &lt;code&gt;fortune&lt;/code&gt; again will select another random quote:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fortune&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
RAM is cheap and thinking hurts.
   -- Uwe Ligges (about memory requirements in R)
      R-help (June 2007)
&lt;/pre&gt;

&lt;p&gt;
If you want to specify a particular quote you can do so by number or by character search:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fortune&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;204&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
fortune&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"memory"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
memory problems (not me. my pc!)
   -- Sara Mouro (subject line for an R-help request)
      R-help (January 2008)

RAM is cheap and thinking hurts.
   -- Uwe Ligges (about memory requirements in R)
      R-help (June 2007)
&lt;/pre&gt;

&lt;p&gt;
That's about it. Well, there are some other options, see &lt;code&gt;?fortune&lt;/code&gt; for the details.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Cow says what?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
If you are a Unix user of a certain age you have no doubt heard of the famous &lt;a href="https://en.wikipedia.org/wiki/Cowsay"&gt;cowsay&lt;/a&gt; program. Now R users can join the fun with the &lt;a href="https://github.com/sckott/cowsay"&gt;cowsay R package&lt;/a&gt; by Scott Chamberlain. Like the &lt;code&gt;fortunes&lt;/code&gt; package, &lt;code&gt;cowsay&lt;/code&gt; exports just one function; &lt;code&gt;say&lt;/code&gt;. Let's take a look:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;## install.packages("cowsay")&lt;/span&gt;
&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;cowsay&lt;span class="p"&gt;)&lt;/span&gt;
say&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello world!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
 -------------- 
Hello world! 
 --------------
    \
      \
        \
            |\___/|
          ==) ^Y^ (==
            \  ^  /
             )=*=(
            /     \
            |     |
           /| | | |\
           \| | |_|/\
      jgs  //_// ___/
               \_)
&lt;/pre&gt;

&lt;p&gt;
Cute, but I was led to believe there would be a cow involved! 
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;say&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Moo may represent an idea, but only the cow knows.\n --Mason Cooley"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    by &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"cow"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
 ----- 
Moo may represent an idea, but only the cow knows.
 --Mason Cooley 
 ------ 
    \   ^__^ 
     \  (oo)\ ________ 
        (__)\         )\ /\ 
             ||------w|
             ||      ||
&lt;/pre&gt;

&lt;p&gt;
There is no option to randomly select an animal, but we can achieve that ourselves easily enough.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;someone_say_hello &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  animal &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;animals&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  say&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, I'm a "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; animal&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; collapse &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; by &lt;span class="o"&gt;=&lt;/span&gt; animal&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
someone_say_hello&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
 ----- 
Hello, I'm a  bigcat . 
 ------ 
    \   
     \
                \`*-.
                 )  _`-.
                .  : `. .
                : _   '  \
                ; *` _.   `*-._
                `-.-'          `-.
                  ;       `       `.
                  :.       .       \
                  .\  .   :   .-'   .
                  '  `+.;  ;  '      :
                  :  '  |    ;       ;-.
                  ; '   : :`-:     _.`* ;
               .*' /  .*' ; .*`- +'  `*'
     [bug]     `*-*   `*-*  `*-*'
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;Putting it all together&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
When I teach R I emphasize composability. That is, unlike some other statistics packages, R enables you to take the output from one function and pass in on to another. We can take advantage of the excellent composability R provides to do useful things like extract coefficients from a list of model fits and put them into a LaTeX table. Or we can use it to do useless things like making a cow tell us our fortune.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;someone_say_my_fortune &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  animal &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; animal &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;animals&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  say&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;fortune&lt;span class="p"&gt;(),&lt;/span&gt; collapse &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"\n"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; by &lt;span class="o"&gt;=&lt;/span&gt; animal&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
someone_say_my_fortune&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
 ------------- 
Only with a very high signal to noise ratio (e.g., high true R^2) can 
torturing data lead to a confession to something other than what the 
analyst wants to hear.
Frank Harrell
NA
R-help
April 2010 
 -------------- 
              \   
               \  
                \
_____________________                              _____________________
`-._                 \           |\__/|           /                 _.-'
    \                 \          |    |          /                 /
     \                 `-_______/      \_______-'                 /
      |                                                          |
      |                                                          |
      |                                                          |
      /                                                          \
     /_____________                                  _____________\
                   `----._                    _.----'
                          `--.            .--'
                              `-.      .-'
                                 \    / :F_P:
                                  \  /
                                   \/
&lt;/pre&gt;

&lt;p&gt;
Because &lt;code&gt;fortune&lt;/code&gt; gives a random quote each time, and we randomly select animals each time, we will get a surprising new delight every time we call the &lt;code&gt;someone_say_my_fortune&lt;/code&gt; function.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;someone_say_my_fortune&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
 ----- 
There's an informal tradition that those announcements [about R releases]
contain at least one mistake, but apparently I forgot this time, so users 
have to make up their own....
Peter Dalgaard
about an apparent non-bug report in his former R-announce message
R-help
December 2009 
 ------ 
    \   
     \
         _
       _/ }
      `&amp;gt;' \
      `|   \
       |   /'-.     .-.
        \'     ';`--' .'
         \'.    `'-./
          '.`-..-;`
            `;-..'
            _| _|
            /` /` [nosig]
&lt;/pre&gt;

&lt;p&gt;
If you want to get really silly about it, you could call that function in your &lt;a href="https://cran.r-project.org/doc/manuals/r-release/R-intro.html#Customizing-the-environment"&gt;.Rprofile&lt;/a&gt;. Or, if you are package author you could add some spice to your warning and error messages by having an ASCII art animal say them. Go forth and have fun!
&lt;/p&gt;

&lt;p&gt;
If you know of other useless (but fun!) R packages let me know in the comments. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>fun</category><category>R</category><guid>http://people.fas.harvard.edu/~izahn/posts/useless-but-fun-r-packages/</guid><pubDate>Tue, 21 Jun 2016 00:44:13 GMT</pubDate></item><item><title>Escaping from character encoding hell in R on Windows</title><link>http://people.fas.harvard.edu/~izahn/posts/reading-data-with-non-native-encoding-in-r/</link><dc:creator>Ista Zahn</dc:creator><description>&lt;p&gt;
Note: the title of this post was inspired by &lt;a href="http://stackoverflow.com/questions/18789330/r-on-windows-character-encoding-hell"&gt;this question on stackoverflow&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
This section gives the basic facts and recommendations for importing files with arbitrary encoding on Windows. The issues described here by and large to not apply on Mac or Linux; they are specific to running &lt;a href="http://people.fas.harvard.edu/~izahn/r-project.org"&gt;R&lt;/a&gt; on Windows.
&lt;/p&gt;

&lt;p&gt;
If you are on a deadline and just need to get the job done this section should be all you need. Additional background and discussion is presented in later sections.
&lt;/p&gt;

&lt;p&gt;
To read a text file with non ASCII encoding into R you should a) determine the encoding and b) read it in such a way that the information is re-encoded into UTF-8, and c) ignore the bug in the &lt;code&gt;data.frame&lt;/code&gt; print method on Windows. Hopefully the encoding is specified in the documentation that accompanied your data. If not, you can guess the encoding using the &lt;code&gt;stri_read_raw&lt;/code&gt; and &lt;code&gt;stri_enc_detect&lt;/code&gt; functions in the &lt;a href="http://www.gagolewski.com/software/stringi/"&gt;stringi&lt;/a&gt;  package. You can ensure that the information is re-encoded to UTF-8 by using the &lt;a href="https://github.com/hadley/readr"&gt;readr&lt;/a&gt; package.
&lt;/p&gt;

&lt;!-- TEASER_END --&gt;

&lt;p&gt;
For example, I have two versions of a file containing numbers and Japanese characters: &lt;code&gt;japanese_utf8.csv&lt;/code&gt; is encoded in UTF-8, and &lt;code&gt;japanese_shiftjis.csv&lt;/code&gt; is encoded in SHIFT-JIS. We can read these files as follows on any platform (Windows, Linux, Mac):
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;readr&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kp"&gt;options&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;stringsAsFactors &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
read_csv&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"japanese_utf8.csv"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
	 locale &lt;span class="o"&gt;=&lt;/span&gt; locale&lt;span class="p"&gt;(&lt;/span&gt;encoding &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
read_csv&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"japanese_shiftjis.csv"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
	 locale &lt;span class="o"&gt;=&lt;/span&gt; locale&lt;span class="p"&gt;(&lt;/span&gt;encoding &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"SHIFT-JIS"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
    No.         発行日 朝夕刊     面名 ページ
1 00001 2015年09月25日   週刊 週刊朝日    022
2 00002 2015年09月25日   週刊 週刊朝日    018
3 00003 2015年09月21日   朝刊   ３総合    003
    No.         発行日 朝夕刊     面名 ページ
1 00001 2015年09月25日   週刊 週刊朝日    022
2 00002 2015年09月25日   週刊 週刊朝日    018
3 00003 2015年09月21日   朝刊   ３総合    003
&lt;/pre&gt;

&lt;p&gt;
On Windows there is a bug in &lt;code&gt;print.data.frame&lt;/code&gt; that causes &lt;code&gt;data.frame&lt;/code&gt;'s with UTF-8 encoded columns to be displayed incorrectly in non UTF-8 locales. Running the above example on Windows produces this:
&lt;/p&gt;

&lt;pre class="example"&gt;
    No.         &amp;lt;U+767A&amp;gt;&amp;lt;U+884C&amp;gt;&amp;lt;U+65E5&amp;gt; &amp;lt;U+671D&amp;gt;&amp;lt;U+5915&amp;gt;&amp;lt;U+520A&amp;gt;                 &amp;lt;U+9762&amp;gt;&amp;lt;U+540D&amp;gt; &amp;lt;U+30DA&amp;gt;&amp;lt;U+30FC&amp;gt;&amp;lt;U+30B8&amp;gt;
1 00001 2015&amp;lt;U+5E74&amp;gt;09&amp;lt;U+6708&amp;gt;25&amp;lt;U+65E5&amp;gt;         &amp;lt;U+9031&amp;gt;&amp;lt;U+520A&amp;gt; &amp;lt;U+9031&amp;gt;&amp;lt;U+520A&amp;gt;&amp;lt;U+671D&amp;gt;&amp;lt;U+65E5&amp;gt;                      022
2 00002 2015&amp;lt;U+5E74&amp;gt;09&amp;lt;U+6708&amp;gt;25&amp;lt;U+65E5&amp;gt;         &amp;lt;U+9031&amp;gt;&amp;lt;U+520A&amp;gt; &amp;lt;U+9031&amp;gt;&amp;lt;U+520A&amp;gt;&amp;lt;U+671D&amp;gt;&amp;lt;U+65E5&amp;gt;                      018
3 00003 2015&amp;lt;U+5E74&amp;gt;09&amp;lt;U+6708&amp;gt;21&amp;lt;U+65E5&amp;gt;         &amp;lt;U+671D&amp;gt;&amp;lt;U+520A&amp;gt;                3&amp;lt;U+7DCF&amp;gt;&amp;lt;U+5408&amp;gt;                      003

    No.         &amp;lt;U+767A&amp;gt;&amp;lt;U+884C&amp;gt;&amp;lt;U+65E5&amp;gt; &amp;lt;U+671D&amp;gt;&amp;lt;U+5915&amp;gt;&amp;lt;U+520A&amp;gt;                 &amp;lt;U+9762&amp;gt;&amp;lt;U+540D&amp;gt; &amp;lt;U+30DA&amp;gt;&amp;lt;U+30FC&amp;gt;&amp;lt;U+30B8&amp;gt;
1 00001 2015&amp;lt;U+5E74&amp;gt;09&amp;lt;U+6708&amp;gt;25&amp;lt;U+65E5&amp;gt;         &amp;lt;U+9031&amp;gt;&amp;lt;U+520A&amp;gt; &amp;lt;U+9031&amp;gt;&amp;lt;U+520A&amp;gt;&amp;lt;U+671D&amp;gt;&amp;lt;U+65E5&amp;gt;                      022
2 00002 2015&amp;lt;U+5E74&amp;gt;09&amp;lt;U+6708&amp;gt;25&amp;lt;U+65E5&amp;gt;         &amp;lt;U+9031&amp;gt;&amp;lt;U+520A&amp;gt; &amp;lt;U+9031&amp;gt;&amp;lt;U+520A&amp;gt;&amp;lt;U+671D&amp;gt;&amp;lt;U+65E5&amp;gt;                      018
3 00003 2015&amp;lt;U+5E74&amp;gt;09&amp;lt;U+6708&amp;gt;21&amp;lt;U+65E5&amp;gt;         &amp;lt;U+671D&amp;gt;&amp;lt;U+520A&amp;gt;                3&amp;lt;U+7DCF&amp;gt;&amp;lt;U+5408&amp;gt;                      003
&lt;/pre&gt;
&lt;p&gt;
which looks terrible but does not actually indicate a problem. The information is encoded correctly, but due to a long-standing bug it is &lt;span class="underline"&gt;displayed&lt;/span&gt; incorrectly. You can check to see if the values are correct by converting the data.frame by (ab)using &lt;code&gt;print.listof&lt;/code&gt;, e.g.,
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kp"&gt;print.listof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;read_csv&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"japanese_shiftjis.csv"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
		      locale &lt;span class="o"&gt;=&lt;/span&gt; locale&lt;span class="p"&gt;(&lt;/span&gt;encoding &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"SHIFT-JIS"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
No. :
[1] "00001" "00002" "00003"

発行日 :
[1] "2015年09月25日" "2015年09月25日" "2015年09月21日"

朝夕刊 :
[1] "週刊" "週刊" "朝刊"

面名 :
[1] "週刊朝日" "週刊朝日" "３総合"  

ページ :
[1] "022" "018" "003"
&lt;/pre&gt;

&lt;p&gt;
To recap: 
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Regardless of platform (Windows, Mac Linux), use the &lt;a href="https://github.com/hadley/readr"&gt;readr&lt;/a&gt; package to read data into R. This will re-encode the contents of the file to UTF-8 for you. 
&lt;/li&gt;
&lt;li&gt;Make sure you specify the encoding using the &lt;code&gt;locale&lt;/code&gt; argument as shown in the example above. 
&lt;/li&gt;
&lt;li&gt;Ignore the ugly &lt;code&gt;print.data.frame&lt;/code&gt; bug and use &lt;code&gt;print.listof&lt;/code&gt; to check that your data was imported correctly.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Those wishing for more details about this issue can read on.
&lt;/p&gt;


&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;What is the problem?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
The problem is that the basic R functions for reading and writing data from and to files does no work in any reasonable way on Windows. If you are struggling with this you are not alone! There are numerous &lt;a href="http://stackoverflow.com/search?tab=votes&amp;amp;q=%255br%255d%2520%255bencoding%255d%2520windows"&gt;questions on stackoverflow&lt;/a&gt;, blog posts (e.g., &lt;a href="http://www.r-bloggers.com/r-and-foreign-characters/"&gt;this one&lt;/a&gt; by Rolf Fredheim, and &lt;a href="http://withr.me/configure-character-encoding-for-r-under-linux-and-windows/"&gt;another&lt;/a&gt; by Huidong Tian), and anguished &lt;a href="http://search.gmane.org/?query=encoding+windows+%2522utf-8%2522+%2522read%2522&amp;amp;author=&amp;amp;group=gmane.comp.lang.r.general&amp;amp;sort=date&amp;amp;DEFAULTOP=and&amp;amp;xP=Zencod%2509Zwindow%2509utf%25098%2509read&amp;amp;xFILTERS=Gcomp.lang.r.general---A"&gt;mailing list posts&lt;/a&gt;. Thinking of the person-hours wasted on this issue over the years almost brings a tear to my eye. 
&lt;/p&gt;

&lt;p&gt;
Let's try it, using some simplified data from a project I worked on last year. For illustration I've created two files containing a mix of English letters, numbers, and Japanese characters. I saved one version with UTF-8 encoding, and another with SHIFT-JIS. On Linux we can read both files easily, provided only that we correctly specify the encoding if the file is not already encoded in UTF-8:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;read.csv&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"japanese_utf8.csv"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
  No.         発行日 朝夕刊     面名 ページ
1   1 2015年09月25日   週刊 週刊朝日     22
2   2 2015年09月25日   週刊 週刊朝日     18
3   3 2015年09月21日   朝刊   ３総合      3
&lt;/pre&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;read.csv&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"japanese_shiftjis.csv"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; fileEncoding &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"SHIFT-JIS"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
  No.         発行日 朝夕刊     面名 ページ
1   1 2015年09月25日   週刊 週刊朝日     22
2   2 2015年09月25日   週刊 週刊朝日     18
3   3 2015年09月21日   朝刊   ３総合      3
&lt;/pre&gt;

&lt;p&gt;
On Windows things are much more difficult. Using &lt;code&gt;read.csv&lt;/code&gt; with the default options does not work because &lt;code&gt;read.csv&lt;/code&gt; assumes that the encoding of the file matches the Windows locale settings:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;read.csv&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"japanese_utf8.csv"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
  No.         ç.ºè.Œæ.. æœ.å..å.Š       é..å.. ãƒšãƒ.ã..
1   1 2015å¹´09æœˆ25æ—¥    é€±åˆŠ é€±åˆŠæœæ—¥        22
2   2 2015å¹´09æœˆ25æ—¥    é€±åˆŠ é€±åˆŠæœæ—¥        18
3   3 2015å¹´09æœˆ21æ—¥    æœåˆŠ    ï¼“ç·åˆ         3
&lt;/pre&gt;

&lt;p&gt;
Trying to tell R that the file is encoded in UTF-8 not a general solution because &lt;code&gt;read.csv&lt;/code&gt; will then try to re-encode from UTF-8 to the native encoding, which may or may not work depending on the contents of the file. On my system trying to read a UTF-8 encoded file containing Japanese characters with the fileEncoding falls flat on its face:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;read.csv&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"japanese_utf8.csv"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; fileEncoding &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
[1] No. X  
&amp;lt;0 rows&amp;gt; (or 0-length row.names)
Warning messages:
1: In read.table(file = file, header = header, sep = sep, quote = quote,  :
  invalid input found on input connection 'japanese_utf8.csv'
2: In read.table(file = file, header = header, sep = sep, quote = quote,  :
  incomplete final line found by readTableHeader on 'japanese_utf8.csv'
&lt;/pre&gt;


&lt;p&gt;
Finally, we might try the &lt;code&gt;encoding&lt;/code&gt; argument rather than &lt;code&gt;fileEncoding&lt;/code&gt;. This simply marks the strings with the specified encoding:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;read.csv&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"japanese_utf8.csv"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; encoding &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
read.csv("japanese_utf8.csv", encoding = "UTF-8")
  No.        X.U.767A..U.884C..U.65E5. X.U.671D..U.5915..U.520A.                X.U.9762..U.540D. X.U.30DA..U.30FC..U.30B8.
1   1 2015&amp;lt;U+5E74&amp;gt;09&amp;lt;U+6708&amp;gt;25&amp;lt;U+65E5&amp;gt;          &amp;lt;U+9031&amp;gt;&amp;lt;U+520A&amp;gt; &amp;lt;U+9031&amp;gt;&amp;lt;U+520A&amp;gt;&amp;lt;U+671D&amp;gt;&amp;lt;U+65E5&amp;gt;                        22
2   2 2015&amp;lt;U+5E74&amp;gt;09&amp;lt;U+6708&amp;gt;25&amp;lt;U+65E5&amp;gt;          &amp;lt;U+9031&amp;gt;&amp;lt;U+520A&amp;gt; &amp;lt;U+9031&amp;gt;&amp;lt;U+520A&amp;gt;&amp;lt;U+671D&amp;gt;&amp;lt;U+65E5&amp;gt;                        18
3   3 2015&amp;lt;U+5E74&amp;gt;09&amp;lt;U+6708&amp;gt;21&amp;lt;U+65E5&amp;gt;          &amp;lt;U+671D&amp;gt;&amp;lt;U+520A&amp;gt;                3&amp;lt;U+7DCF&amp;gt;&amp;lt;U+5408&amp;gt;                         3
&lt;/pre&gt;
&lt;p&gt;
This kind of works, though you wouldn't know it from the output. As mentioned above, there is a bug in the &lt;code&gt;print.data.frame&lt;/code&gt; function that prevents UTF-8 encoded text from displaying correctly. We can use another print method to see that the column values have been read in correctly:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kp"&gt;print.listof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;read.csv&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"japanese_utf8.csv"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; encoding &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
No. :
[1] 1 2 3

X.U.767A..U.884C..U.65E5. :
[1] "2015年09月25日" "2015年09月25日" "2015年09月21日"

X.U.671D..U.5915..U.520A. :
[1] "週刊" "週刊" "朝刊"

X.U.9762..U.540D. :
[1] "週刊朝日" "週刊朝日" "３総合"  

X.U.30DA..U.30FC..U.30B8. :
[1] 22 18  3
&lt;/pre&gt;

&lt;p&gt;
Unfortunately there are two problems with this: first, the names of the columns have not been correctly encoded, and second, this will only work if your input data is in UTF-8 in the first place. Trying to apply this strategy to our SHIFT-JIS encoded file will not work at all because we &lt;span class="underline"&gt;cannot&lt;/span&gt; mark strings with arbitrary encoding, only with UTF-8&lt;sup&gt;&lt;a id="fnr.1" name="fnr.1" class="footref" href="http://people.fas.harvard.edu/~izahn/posts/reading-data-with-non-native-encoding-in-r/#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt;. Trying to mark the string as SHIFT-JIS will silently fail:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kp"&gt;print.listof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;read.csv&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"japanese_shiftjis.csv"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; encoding &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"SHIFT-JIS"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
No. :
[1] 1 2 3

X...s.ú :
[1] "2015”N09ŒŽ25“ú" "2015”N09ŒŽ25“ú" "2015”N09ŒŽ21“ú"

X....Š. :
[1] "TŠ§" "TŠ§" "’©Š§"

X.Ê.. :
[1] "TŠ§’©“ú" "TŠ§’©“ú" "‚R‘‡"  

ƒy..ƒW :
[1] 22 18  3
&lt;/pre&gt;

&lt;p&gt;
Ouch! Why is this so hard? Can we make it suck less?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Encoding in R&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Basically R gives you two ways of handling character encoding. You can use the default encoding of your OS, or you can use UTF-8&lt;sup&gt;&lt;a id="fnr.1.100" name="fnr.1.100" class="footref" href="http://people.fas.harvard.edu/~izahn/posts/reading-data-with-non-native-encoding-in-r/#fn.1"&gt;1&lt;/a&gt;&lt;/sup&gt;. On OS X and Linux these options are often the same, since the default OS encoding is usually UTF-8; this is a great advantage because just about everything can be represented in UTF-8. On Windows there is no such luck. On my Windows 7 machine the default is "Windows code page 1252"; many characters (such as Japanese) cannot be represented in code page 1252. If I want to work with Japanese text in R on Windows I have two options; change my locale to Japanese, or I can convert strings to UTF-8 and mark them as such.
&lt;/p&gt;

&lt;p&gt;
In some ways just changing your locale to one that can accommodate the data you are working with is the simplest approach. Again, on Mac and Linux the locale usually specifies UTF-8 encoding, so no changes are needed; things should just work as you would expect them to. On windows we can change the locale to match the data we are working with using the &lt;code&gt;Sys.setlocale&lt;/code&gt; function. This sometimes works well; for example, we can read our UTF-8 and SHIFT-JIS encoded data on Windows as follows:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;setlocale&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"LC_ALL"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"English_United States.932"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
read.csv&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"japanese_shiftjis.csv"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
read.csv&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"japanese_utf8.csv"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; fileEncoding &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
[1] "LC_COLLATE=English_United States.932;LC_CTYPE=English_United States.932;LC_MONETARY=English_United States.932;LC_NUMERIC=C;LC_TIME=English_United States.932"

  No.         発行日 朝夕刊     面名 ページ
1   1 2015年09月25日   週刊 週刊朝日     22
2   2 2015年09月25日   週刊 週刊朝日     18
3   3 2015年09月21日   朝刊   ３総合      3

  No.         発行日 朝夕刊     面名 ページ
1   1 2015年09月25日   週刊 週刊朝日     22
2   2 2015年09月25日   週刊 週刊朝日     18
3   3 2015年09月21日   朝刊   ３総合      3
&lt;/pre&gt;

&lt;p&gt;
This works fine until we want to read some other kind of text in the same R session, and then we are right back to the same old problem. Another issue with this method is that it does not work in Rstudio unless the locale is set on startup; you cannot change the locale of a running session in Rstudio&lt;sup&gt;&lt;a id="fnr.2" name="fnr.2" class="footref" href="http://people.fas.harvard.edu/~izahn/posts/reading-data-with-non-native-encoding-in-r/#fn.2"&gt;2&lt;/a&gt;&lt;/sup&gt;.
&lt;/p&gt;

&lt;p&gt;
Because the &lt;code&gt;Sys.setlocale&lt;/code&gt; method only works for a subset of languages in any given session, our best bet is to read store everything in UTF-8 (and make sure it is marked as such). It is not convenient to do this using the &lt;code&gt;read.table&lt;/code&gt; family of functions in R, but it is possible with some care:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;x &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; read.csv&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"japanese_shiftjis.csv"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
	      encoding &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
	      check.names &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;FALSE&lt;/span&gt; &lt;span class="c1"&gt;# otherwise R will mangle the names&lt;/span&gt;
	      &lt;span class="p"&gt;)&lt;/span&gt;
charcols &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="kp"&gt;sapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;is.numeric&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
x&lt;span class="p"&gt;[&lt;/span&gt;charcols&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;lapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;[&lt;/span&gt;charcols&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="kp"&gt;iconv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; from &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"SHIFT-JIS"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; to &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kp"&gt;names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;iconv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;),&lt;/span&gt; from &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"SHIFT-JIS"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; to &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kp"&gt;print.listof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
No. :
[1] 1 2 3

発行日 :
[1] "2015年09月25日" "2015年09月25日" "2015年09月21日"

朝夕刊 :
[1] "週刊" "週刊" "朝刊"

面名 :
[1] "週刊朝日" "週刊朝日" "３総合"  

ページ :
[1] 22 18  3
&lt;/pre&gt;
&lt;p&gt;
OK it works, but honestly that too much work for something as simple as reading a .csv file into R. As suggested at the beginning of this post, a better strategy is to use the &lt;a href="https://github.com/hadley/readr"&gt;readr&lt;/a&gt; package because it will do the conversion to UTF-8 for you:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kp"&gt;print.listof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;read_csv&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"arabic_utf-8.csv"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; locale &lt;span class="o"&gt;=&lt;/span&gt; locale&lt;span class="p"&gt;(&lt;/span&gt;encoding &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="kp"&gt;print.listof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;read_csv&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"japanese_utf8.csv"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; locale &lt;span class="o"&gt;=&lt;/span&gt; locale&lt;span class="p"&gt;(&lt;/span&gt;encoding &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="kp"&gt;print.listof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;read_csv&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"japanese_shiftjis.csv"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; locale &lt;span class="o"&gt;=&lt;/span&gt; locale&lt;span class="p"&gt;(&lt;/span&gt;encoding &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"SHIFT-JIS"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
X5 :
[1] "1895-01-02" "1895-01-07" "1895-01-16"
X8 :
[1] "اصلى" "اصلى" "اصلى"
X12 :
[1] "وقائع" "وقائع" "وقائع"

No. :
[1] "00001" "00002" "00003"
発行日 :
[1] "2015年09月25日" "2015年09月25日" "2015年09月21日"
朝夕刊 :
[1] "週刊" "週刊" "朝刊"
面名 :
[1] "週刊朝日" "週刊朝日" "３総合"  
ページ :
[1] "022" "018" "003"


No. :
[1] "00001" "00002" "00003"
発行日 :
[1] "2015年09月25日" "2015年09月25日" "2015年09月21日"
朝夕刊 :
[1] "週刊" "週刊" "朝刊"
面名 :
[1] "週刊朝日" "週刊朝日" "３総合"  
ページ :
[1] "022" "018" "003"
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;Files&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
Here are the &lt;a href="http://people.fas.harvard.edu/~izahn/example_files/blog/encoding_hell.zip"&gt;example data files and code&lt;/a&gt; and needed to run the examples in this post.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="footnotes"&gt;
&lt;h2 class="footnotes"&gt;Footnotes: &lt;/h2&gt;
&lt;div id="text-footnotes"&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.1" name="fn.1" class="footnum" href="http://people.fas.harvard.edu/~izahn/posts/reading-data-with-non-native-encoding-in-r/#fnr.1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;p class="footpara"&gt;
We can also mark strings as encoded in &lt;code&gt;latin1&lt;/code&gt;, but that is not useful if you take my advice and store everything in UTF-8.
&lt;/p&gt;&lt;/div&gt;

&lt;div class="footdef"&gt;&lt;sup&gt;&lt;a id="fn.2" name="fn.2" class="footnum" href="http://people.fas.harvard.edu/~izahn/posts/reading-data-with-non-native-encoding-in-r/#fnr.2"&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;p class="footpara"&gt;
See &lt;a href="https://support.rstudio.com/hc/en-us/articles/200532197-Character-Encoding"&gt;https://support.rstudio.com/hc/en-us/articles/200532197-Character-Encoding&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</description><category>Encoding</category><category>Files</category><category>R</category><category>SHIFT-JIS</category><category>UTF-8</category><guid>http://people.fas.harvard.edu/~izahn/posts/reading-data-with-non-native-encoding-in-r/</guid><pubDate>Tue, 14 Jun 2016 17:57:09 GMT</pubDate></item></channel></rss>